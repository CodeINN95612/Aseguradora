// <auto-generated />
using System;
using Aseguradora.Auth.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Aseguradora.Infrastructure.Migrations
{
    [DbContext(typeof(AseguradoraDBContext))]
    [Migration("20230118221458_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Aseguradora.Auth.Data.Entities.Moneda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Moneda");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = "USD",
                            Nombre = "Dolar Estadounidense"
                        },
                        new
                        {
                            Id = 2,
                            Codigo = "EU",
                            Nombre = "Euro"
                        });
                });

            modelBuilder.Entity("Aseguradora.Auth.Data.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdEmpresa")
                        .HasColumnType("int");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioCampo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Usuario");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpresa");

                    b.HasIndex("IdRol");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Clave = "admin",
                            IdRol = 1,
                            UsuarioCampo = "admin"
                        });
                });

            modelBuilder.Entity("Aseguradora.Domain.Entities.Aplicacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desde")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEmbarque")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaLLegada")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hasta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdEmpresaAsegurado")
                        .HasColumnType("int");

                    b.Property<int>("IdEmpresaPagador")
                        .HasColumnType("int");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("IdEmpresaAsegurado");

                    b.HasIndex("IdEmpresaPagador");

                    b.ToTable("Aplicacion");
                });

            modelBuilder.Entity("Aseguradora.Domain.Entities.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("Aseguradora.Domain.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("EsAdministrador")
                        .HasColumnType("bit");

                    b.Property<bool>("EsEjecutivo")
                        .HasColumnType("bit");

                    b.Property<bool>("EsTrabajador")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rol");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EsAdministrador = true,
                            EsEjecutivo = false,
                            EsTrabajador = false,
                            Nombre = "Administrador Global"
                        });
                });

            modelBuilder.Entity("Aseguradora.Auth.Data.Entities.Usuario", b =>
                {
                    b.HasOne("Aseguradora.Domain.Entities.Empresa", "Empresa")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdEmpresa");

                    b.HasOne("Aseguradora.Domain.Entities.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Aseguradora.Domain.Entities.Aplicacion", b =>
                {
                    b.HasOne("Aseguradora.Domain.Entities.Empresa", null)
                        .WithMany("Aplicaciones")
                        .HasForeignKey("EmpresaId");

                    b.HasOne("Aseguradora.Domain.Entities.Empresa", "EmpresaAsegurado")
                        .WithMany()
                        .HasForeignKey("IdEmpresaAsegurado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aseguradora.Domain.Entities.Empresa", "EmpresaPagador")
                        .WithMany()
                        .HasForeignKey("IdEmpresaPagador")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmpresaAsegurado");

                    b.Navigation("EmpresaPagador");
                });

            modelBuilder.Entity("Aseguradora.Domain.Entities.Empresa", b =>
                {
                    b.Navigation("Aplicaciones");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Aseguradora.Domain.Entities.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
